{"ast":null,"code":"import _regeneratorRuntime from\"/home/jingyi/my-fullstack-app/site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jingyi/my-fullstack-app/site/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n * Utils: Back-end\n */import config from'../config';/**\n * Register a new user\n */export var userRegister=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email,password){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return requestApi('/users/register','POST',{email:email,password:password});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function userRegister(_x,_x2){return _ref.apply(this,arguments);};}();/**\n * Login a new user\n */export var userLogin=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email,password){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return requestApi('/users/login','POST',{email:email,password:password});case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function userLogin(_x3,_x4){return _ref2.apply(this,arguments);};}();/**\n * userGet\n */export var userGet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return requestApi('/user','POST',null,{Authorization:\"Bearer \".concat(token)});case 2:return _context3.abrupt(\"return\",_context3.sent);case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function userGet(_x5){return _ref3.apply(this,arguments);};}();/**\n * API request to call the backend\n */export var requestApi=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _config$domains;var path,method,data,headers,url,response,error,_args4=arguments;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:path=_args4.length>0&&_args4[0]!==undefined?_args4[0]:'';method=_args4.length>1&&_args4[1]!==undefined?_args4[1]:'GET';data=_args4.length>2&&_args4[2]!==undefined?_args4[2]:null;headers=_args4.length>3&&_args4[3]!==undefined?_args4[3]:{};if(config===null||config===void 0?void 0:(_config$domains=config.domains)===null||_config$domains===void 0?void 0:_config$domains.api){_context4.next=6;break;}throw new Error(\"Error: Missing API Domain \\u2013 Please add the API domain from your serverless Express.js back-end to this front-end application.  You can do this in the \\\"site\\\" folder, in the \\\"./config.js\\\" file.  Instructions are listed there and in the documentation.\");case 6:// Prepare URL\nif(!path.startsWith('/')){path=\"/\".concat(path);}url=\"\".concat(config.domains.api).concat(path);// Set headers\nheaders=Object.assign({'Content-Type':'application/json'},headers);// Default options are marked with *\n_context4.next=11;return fetch(url,{method:method.toUpperCase(),mode:'cors',cache:'no-cache',headers:headers,body:data?JSON.stringify(data):null});case 11:response=_context4.sent;if(!(response.status<200||response.status>=300)){_context4.next=17;break;}_context4.next=15;return response.json();case 15:error=_context4.sent;throw new Error(error.error);case 17:_context4.next=19;return response.json();case 19:return _context4.abrupt(\"return\",_context4.sent);case 20:case\"end\":return _context4.stop();}}},_callee4);}));return function requestApi(){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/jingyi/my-fullstack-app/site/src/utils/api.js"],"names":["config","userRegister","email","password","requestApi","userLogin","userGet","token","Authorization","path","method","data","headers","domains","api","Error","startsWith","url","Object","assign","fetch","toUpperCase","mode","cache","body","JSON","stringify","response","status","json","error"],"mappings":"+SAAA;AACA;AACA,GAEA,MAAOA,CAAAA,MAAP,KAAmB,WAAnB,CAEA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,YAAY,0FAAG,iBAAOC,KAAP,CAAcC,QAAd,wIACbC,CAAAA,UAAU,CAAC,iBAAD,CAAoB,MAApB,CAA4B,CAAEF,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAA5B,CADG,6GAAH,kBAAZF,CAAAA,YAAY,gDAAlB,CAIP;AACA;AACA,GACA,MAAO,IAAMI,CAAAA,SAAS,2FAAG,kBAAOH,KAAP,CAAcC,QAAd,6IACVC,CAAAA,UAAU,CAAC,cAAD,CAAiB,MAAjB,CAAyB,CAAEF,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAzB,CADA,iHAAH,kBAATE,CAAAA,SAAS,kDAAf,CAIP;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,OAAO,2FAAG,kBAAOC,KAAP,6IACRH,CAAAA,UAAU,CAAC,OAAD,CAAU,MAAV,CAAkB,IAAlB,CAAwB,CAC7CI,aAAa,kBAAYD,KAAZ,CADgC,CAAxB,CADF,iHAAH,kBAAPD,CAAAA,OAAO,8CAAb,CAMP;AACA;AACA,GACA,MAAO,IAAMF,CAAAA,UAAU,2FAAG,6NACxBK,IADwB,kDACjB,EADiB,CAExBC,MAFwB,kDAEf,KAFe,CAGxBC,IAHwB,kDAGjB,IAHiB,CAIxBC,OAJwB,kDAId,EAJc,IAOnBZ,MAPmB,SAOnBA,MAPmB,kCAOnBA,MAAM,CAAEa,OAPW,0CAOnB,gBAAiBC,GAPE,+BAQhB,IAAIC,CAAAA,KAAJ,qQARgB,QAWxB;AACA,GAAI,CAACN,IAAI,CAACO,UAAL,CAAgB,GAAhB,CAAL,CAA2B,CACzBP,IAAI,YAAOA,IAAP,CAAJ,CACD,CACKQ,GAfkB,WAeTjB,MAAM,CAACa,OAAP,CAAeC,GAfN,SAeYL,IAfZ,EAiBxB;AACAG,OAAO,CAAGM,MAAM,CAACC,MAAP,CACR,CAAE,eAAgB,kBAAlB,CADQ,CAERP,OAFQ,CAAV,CAKA;AAvBwB,wBAwBDQ,CAAAA,KAAK,CAACH,GAAD,CAAM,CAChCP,MAAM,CAAEA,MAAM,CAACW,WAAP,EADwB,CAEhCC,IAAI,CAAE,MAF0B,CAGhCC,KAAK,CAAE,UAHyB,CAIhCX,OAAO,CAAPA,OAJgC,CAKhCY,IAAI,CAAEb,IAAI,CAAGc,IAAI,CAACC,SAAL,CAAef,IAAf,CAAH,CAA0B,IALJ,CAAN,CAxBJ,SAwBlBgB,QAxBkB,qBAgCpBA,QAAQ,CAACC,MAAT,CAAkB,GAAlB,EAAyBD,QAAQ,CAACC,MAAT,EAAmB,GAhCxB,oDAiCFD,CAAAA,QAAQ,CAACE,IAAT,EAjCE,SAiChBC,KAjCgB,qBAkChB,IAAIf,CAAAA,KAAJ,CAAUe,KAAK,CAACA,KAAhB,CAlCgB,iCAqCXH,CAAAA,QAAQ,CAACE,IAAT,EArCW,mHAAH,kBAAVzB,CAAAA,UAAU,2CAAhB","sourcesContent":["/**\n * Utils: Back-end\n */\n\nimport config from '../config'\n\n/**\n * Register a new user\n */\nexport const userRegister = async (email, password) => {\n  return await requestApi('/users/register', 'POST', { email, password })\n}\n\n/**\n * Login a new user\n */\nexport const userLogin = async (email, password) => {\n  return await requestApi('/users/login', 'POST', { email, password })\n}\n\n/**\n * userGet\n */\nexport const userGet = async (token) => {\n  return await requestApi('/user', 'POST', null, {\n    Authorization: `Bearer ${token}`\n  })\n}\n\n/**\n * API request to call the backend\n */\nexport const requestApi = async (\n  path = '',\n  method = 'GET',\n  data = null,\n  headers = {}) => {\n\n  // Check if API URL has been set\n  if (!config?.domains?.api) {\n    throw new Error(`Error: Missing API Domain â€“ Please add the API domain from your serverless Express.js back-end to this front-end application.  You can do this in the \"site\" folder, in the \"./config.js\" file.  Instructions are listed there and in the documentation.`)\n  }\n\n  // Prepare URL\n  if (!path.startsWith('/')) {\n    path = `/${path}`\n  }\n  const url = `${config.domains.api}${path}`\n\n  // Set headers\n  headers = Object.assign(\n    { 'Content-Type': 'application/json' },\n    headers\n  )\n\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: method.toUpperCase(),\n    mode: 'cors',\n    cache: 'no-cache',\n    headers,\n    body: data ? JSON.stringify(data) : null\n  })\n\n  if (response.status < 200 || response.status >= 300) {\n    const error = await response.json()\n    throw new Error(error.error)\n  }\n\n  return await response.json()\n}"]},"metadata":{},"sourceType":"module"}