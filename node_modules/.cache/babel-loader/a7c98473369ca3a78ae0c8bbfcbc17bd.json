{"ast":null,"code":"import Cookies from 'js-cookie';\n/**\n * Format Org and Username correctly for the Serverless Platform backend\n */\n\nexport const formatOrgAndUsername = (name = '') => {\n  name = name.toString().toLowerCase().replace(/[^a-z\\d-]+/gi, '-'); // Remove multiple instances of hyphens\n\n  name = name.replace(/-{2,}/g, '-');\n\n  if (name.length > 40) {\n    name = name.substring(0, 40);\n  }\n\n  return name;\n};\n/**\n * Parse query parameters in a URL\n * @param {*} searchString \n */\n\nexport const parseQueryParams = (searchString = null) => {\n  if (!searchString) {\n    return null;\n  } // Clone string\n\n\n  let clonedParams = (' ' + searchString).slice(1);\n  return clonedParams.substr(1).split('&').filter(el => el.length).map(el => el.split('=')).reduce((accumulator, currentValue) => Object.assign(accumulator, {\n    [decodeURIComponent(currentValue.shift())]: decodeURIComponent(currentValue.pop())\n  }), {});\n};\n/**\n * Parse hash fragment parameters in a URL\n */\n\nexport const parseHashFragment = hashString => {\n  const hashData = {};\n  let hash = decodeURI(hashString);\n  hash = hash.split('&');\n  hash.forEach(val => {\n    val = val.replace('#', '');\n    hashData[val.split('=')[0]] = val.split('=')[1];\n  });\n  return hashData;\n};\n/**\n * Save session in browser cookie\n */\n\nexport const saveSession = (userId, userEmail, userToken) => {\n  Cookies.set('serverless', {\n    userId,\n    userEmail,\n    userToken\n  });\n};\n/**\n * Get session in browser cookie\n */\n\nexport const getSession = () => {\n  const data = Cookies.get('serverless');\n  return data ? JSON.parse(data) : null;\n};\n/**\n * Delete session in browser cookie\n */\n\nexport const deleteSession = () => {\n  Cookies.remove('serverless');\n};","map":{"version":3,"sources":["/home/jingyi/my-fullstack-app/site/src/utils/helpers.js"],"names":["Cookies","formatOrgAndUsername","name","toString","toLowerCase","replace","length","substring","parseQueryParams","searchString","clonedParams","slice","substr","split","filter","el","map","reduce","accumulator","currentValue","Object","assign","decodeURIComponent","shift","pop","parseHashFragment","hashString","hashData","hash","decodeURI","forEach","val","saveSession","userId","userEmail","userToken","set","getSession","data","get","JSON","parse","deleteSession","remove"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,IAAI,GAAG,EAAR,KAAe;AAChDA,EAAAA,IAAI,GAAGA,IAAI,CAACC,QAAL,GAAgBC,WAAhB,GAA8BC,OAA9B,CAAsC,cAAtC,EAAsD,GAAtD,CAAP,CADgD,CAEhD;;AACAH,EAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,QAAb,EAAuB,GAAvB,CAAP;;AACA,MAAIH,IAAI,CAACI,MAAL,GAAc,EAAlB,EAAsB;AACpBJ,IAAAA,IAAI,GAAGA,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAP;AACD;;AACD,SAAOL,IAAP;AACF,CARM;AAUP;AACA;AACA;AACA;;AACA,OAAO,MAAMM,gBAAgB,GAAG,CAACC,YAAY,GAAG,IAAhB,KAAyB;AACvD,MAAI,CAACA,YAAL,EAAmB;AACjB,WAAO,IAAP;AACD,GAHsD,CAKvD;;;AACA,MAAIC,YAAY,GAAG,CAAC,MAAMD,YAAP,EAAqBE,KAArB,CAA2B,CAA3B,CAAnB;AAEA,SAAOD,YAAY,CAChBE,MADI,CACG,CADH,EAEJC,KAFI,CAEE,GAFF,EAGJC,MAHI,CAGIC,EAAD,IAAQA,EAAE,CAACT,MAHd,EAIJU,GAJI,CAICD,EAAD,IAAQA,EAAE,CAACF,KAAH,CAAS,GAAT,CAJR,EAKJI,MALI,CAMH,CAACC,WAAD,EAAcC,YAAd,KACEC,MAAM,CAACC,MAAP,CAAcH,WAAd,EAA2B;AACzB,KAACI,kBAAkB,CAACH,YAAY,CAACI,KAAb,EAAD,CAAnB,GAA4CD,kBAAkB,CAACH,YAAY,CAACK,GAAb,EAAD;AADrC,GAA3B,CAPC,EAUH,EAVG,CAAP;AAYD,CApBM;AAsBP;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,UAAD,IAAgB;AAC/C,QAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,IAAI,GAAGC,SAAS,CAACH,UAAD,CAApB;AACAE,EAAAA,IAAI,GAAGA,IAAI,CAACf,KAAL,CAAW,GAAX,CAAP;AACAe,EAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBA,IAAAA,GAAG,GAAGA,GAAG,CAAC1B,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN;AACAsB,IAAAA,QAAQ,CAACI,GAAG,CAAClB,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAD,CAAR,GAA8BkB,GAAG,CAAClB,KAAJ,CAAU,GAAV,EAAe,CAAf,CAA9B;AACD,GAHD;AAIA,SAAOc,QAAP;AACD,CATM;AAWP;AACA;AACA;;AACA,OAAO,MAAMK,WAAW,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,SAApB,KAAkC;AAC3DnC,EAAAA,OAAO,CAACoC,GAAR,CAAY,YAAZ,EAA0B;AAAEH,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,GAA1B;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAME,UAAU,GAAG,MAAM;AAC9B,QAAMC,IAAI,GAAGtC,OAAO,CAACuC,GAAR,CAAY,YAAZ,CAAb;AACA,SAAOD,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAH,GAAsB,IAAjC;AACD,CAHM;AAKP;AACA;AACA;;AACA,OAAO,MAAMI,aAAa,GAAG,MAAM;AACjC1C,EAAAA,OAAO,CAAC2C,MAAR,CAAe,YAAf;AACD,CAFM","sourcesContent":["import Cookies from 'js-cookie'\n\n/**\n * Format Org and Username correctly for the Serverless Platform backend\n */\nexport const formatOrgAndUsername = (name = '') => {\n   name = name.toString().toLowerCase().replace(/[^a-z\\d-]+/gi, '-')\n   // Remove multiple instances of hyphens\n   name = name.replace(/-{2,}/g, '-')\n   if (name.length > 40) {\n     name = name.substring(0, 40)\n   }\n   return name\n}\n\n/**\n * Parse query parameters in a URL\n * @param {*} searchString \n */\nexport const parseQueryParams = (searchString = null) => {\n  if (!searchString) {\n    return null\n  }\n\n  // Clone string\n  let clonedParams = (' ' + searchString).slice(1)\n\n  return clonedParams\n    .substr(1)\n    .split('&')\n    .filter((el) => el.length)\n    .map((el) => el.split('='))\n    .reduce(\n      (accumulator, currentValue) =>\n        Object.assign(accumulator, {\n          [decodeURIComponent(currentValue.shift())]: decodeURIComponent(currentValue.pop())\n        }),\n      {}\n    )\n}\n\n/**\n * Parse hash fragment parameters in a URL\n */\nexport const parseHashFragment = (hashString) => {\n  const hashData = {}\n  let hash = decodeURI(hashString)\n  hash = hash.split('&')\n  hash.forEach((val) => {\n    val = val.replace('#', '')\n    hashData[val.split('=')[0]] = val.split('=')[1]\n  })\n  return hashData\n}\n\n/**\n * Save session in browser cookie\n */\nexport const saveSession = (userId, userEmail, userToken) => {\n  Cookies.set('serverless', { userId, userEmail, userToken })\n}\n\n/**\n * Get session in browser cookie\n */\nexport const getSession = () => {\n  const data = Cookies.get('serverless')\n  return data ? JSON.parse(data) : null\n}\n\n/**\n * Delete session in browser cookie\n */\nexport const deleteSession = () => {\n  Cookies.remove('serverless')\n}"]},"metadata":{},"sourceType":"module"}