{"ast":null,"code":"/**\n * Utils: Back-end\n */\nimport config from '../config';\n/**\n * Register a new user\n */\n\nexport const userRegister = async (email, password) => {\n  return await requestApi('/users/register', 'POST', {\n    email,\n    password\n  });\n};\n/**\n * Login a new user\n */\n\nexport const userLogin = async (email, password) => {\n  return await requestApi('/users/login', 'POST', {\n    email,\n    password\n  });\n};\n/**\n * userGet\n */\n\nexport const userGet = async token => {\n  return await requestApi('/user', 'POST', null, {\n    Authorization: `Bearer ${token}`\n  });\n};\n/**\n * API request to call the backend\n */\n\nexport const requestApi = async (path = '', method = 'GET', data = null, headers = {}) => {\n  var _config$domains;\n\n  // Check if API URL has been set\n  if (!(config === null || config === void 0 ? void 0 : (_config$domains = config.domains) === null || _config$domains === void 0 ? void 0 : _config$domains.api)) {\n    throw new Error(`Error: Missing API Domain – Please add the API domain from your serverless Express.js back-end to this front-end application.  You can do this in the \"site\" folder, in the \"./config.js\" file.  Instructions are listed there and in the documentation.`);\n  } // Prepare URL\n\n\n  if (!path.startsWith('/')) {\n    path = `/${path}`;\n  }\n\n  const url = `${config.domains.api}${path}`; // Set headers\n\n  headers = Object.assign({\n    'Content-Type': 'application/json'\n  }, headers); // Default options are marked with *\n\n  const response = await fetch(url, {\n    method: method.toUpperCase(),\n    mode: 'cors',\n    cache: 'no-cache',\n    headers,\n    body: data ? JSON.stringify(data) : null\n  });\n\n  if (response.status < 200 || response.status >= 300) {\n    const error = await response.json();\n    throw new Error(error.error);\n  }\n\n  return await response.json();\n};","map":{"version":3,"sources":["/home/jingyi/my-fullstack-app/site/src/utils/api.js"],"names":["config","userRegister","email","password","requestApi","userLogin","userGet","token","Authorization","path","method","data","headers","domains","api","Error","startsWith","url","Object","assign","response","fetch","toUpperCase","mode","cache","body","JSON","stringify","status","error","json"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACrD,SAAO,MAAMC,UAAU,CAAC,iBAAD,EAAoB,MAApB,EAA4B;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA5B,CAAvB;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAME,SAAS,GAAG,OAAOH,KAAP,EAAcC,QAAd,KAA2B;AAClD,SAAO,MAAMC,UAAU,CAAC,cAAD,EAAiB,MAAjB,EAAyB;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAzB,CAAvB;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAMG,OAAO,GAAG,MAAOC,KAAP,IAAiB;AACtC,SAAO,MAAMH,UAAU,CAAC,OAAD,EAAU,MAAV,EAAkB,IAAlB,EAAwB;AAC7CI,IAAAA,aAAa,EAAG,UAASD,KAAM;AADc,GAAxB,CAAvB;AAGD,CAJM;AAMP;AACA;AACA;;AACA,OAAO,MAAMH,UAAU,GAAG,OACxBK,IAAI,GAAG,EADiB,EAExBC,MAAM,GAAG,KAFe,EAGxBC,IAAI,GAAG,IAHiB,EAIxBC,OAAO,GAAG,EAJc,KAIP;AAAA;;AAEjB;AACA,MAAI,EAACZ,MAAD,aAACA,MAAD,0CAACA,MAAM,CAAEa,OAAT,oDAAC,gBAAiBC,GAAlB,CAAJ,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAW,0PAAX,CAAN;AACD,GALgB,CAOjB;;;AACA,MAAI,CAACN,IAAI,CAACO,UAAL,CAAgB,GAAhB,CAAL,EAA2B;AACzBP,IAAAA,IAAI,GAAI,IAAGA,IAAK,EAAhB;AACD;;AACD,QAAMQ,GAAG,GAAI,GAAEjB,MAAM,CAACa,OAAP,CAAeC,GAAI,GAAEL,IAAK,EAAzC,CAXiB,CAajB;;AACAG,EAAAA,OAAO,GAAGM,MAAM,CAACC,MAAP,CACR;AAAE,oBAAgB;AAAlB,GADQ,EAERP,OAFQ,CAAV,CAdiB,CAmBjB;;AACA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAChCP,IAAAA,MAAM,EAAEA,MAAM,CAACY,WAAP,EADwB;AAEhCC,IAAAA,IAAI,EAAE,MAF0B;AAGhCC,IAAAA,KAAK,EAAE,UAHyB;AAIhCZ,IAAAA,OAJgC;AAKhCa,IAAAA,IAAI,EAAEd,IAAI,GAAGe,IAAI,CAACC,SAAL,CAAehB,IAAf,CAAH,GAA0B;AALJ,GAAN,CAA5B;;AAQA,MAAIS,QAAQ,CAACQ,MAAT,GAAkB,GAAlB,IAAyBR,QAAQ,CAACQ,MAAT,IAAmB,GAAhD,EAAqD;AACnD,UAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAApB;AACA,UAAM,IAAIf,KAAJ,CAAUc,KAAK,CAACA,KAAhB,CAAN;AACD;;AAED,SAAO,MAAMT,QAAQ,CAACU,IAAT,EAAb;AACD,CAtCM","sourcesContent":["/**\n * Utils: Back-end\n */\n\nimport config from '../config'\n\n/**\n * Register a new user\n */\nexport const userRegister = async (email, password) => {\n  return await requestApi('/users/register', 'POST', { email, password })\n}\n\n/**\n * Login a new user\n */\nexport const userLogin = async (email, password) => {\n  return await requestApi('/users/login', 'POST', { email, password })\n}\n\n/**\n * userGet\n */\nexport const userGet = async (token) => {\n  return await requestApi('/user', 'POST', null, {\n    Authorization: `Bearer ${token}`\n  })\n}\n\n/**\n * API request to call the backend\n */\nexport const requestApi = async (\n  path = '',\n  method = 'GET',\n  data = null,\n  headers = {}) => {\n\n  // Check if API URL has been set\n  if (!config?.domains?.api) {\n    throw new Error(`Error: Missing API Domain – Please add the API domain from your serverless Express.js back-end to this front-end application.  You can do this in the \"site\" folder, in the \"./config.js\" file.  Instructions are listed there and in the documentation.`)\n  }\n\n  // Prepare URL\n  if (!path.startsWith('/')) {\n    path = `/${path}`\n  }\n  const url = `${config.domains.api}${path}`\n\n  // Set headers\n  headers = Object.assign(\n    { 'Content-Type': 'application/json' },\n    headers\n  )\n\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: method.toUpperCase(),\n    mode: 'cors',\n    cache: 'no-cache',\n    headers,\n    body: data ? JSON.stringify(data) : null\n  })\n\n  if (response.status < 200 || response.status >= 300) {\n    const error = await response.json()\n    throw new Error(error.error)\n  }\n\n  return await response.json()\n}"]},"metadata":{},"sourceType":"module"}